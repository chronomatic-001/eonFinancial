This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
next-env.d.ts
next.config.mjs
package.json
postcss.config.js
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/app/signin/page.tsx
src/app/signup/page.tsx
src/components/AuthDialog.tsx
src/components/Community.tsx
src/components/ErrorBoundary.tsx
src/components/FeatureSelection.tsx
src/components/Layout.tsx
src/components/ProtectedRoute.tsx
src/components/SparkSelection.tsx
src/context/AuthContext.tsx
src/data/constants.ts
src/index.css
src/lib/database.types.ts
src/lib/supabase.ts
src/types/index.ts
src/vite-env.d.ts
supabase/migrations/20250211012758_royal_fog.sql
supabase/migrations/20250211021811_royal_frost.sql
supabase/migrations/20250211023102_amber_meadow.sql
supabase/migrations/20250211023257_damp_pine.sql
supabase/migrations/20250211023723_young_prism.sql
supabase/migrations/20250211025415_proud_wood.sql
supabase/migrations/20250211031036_royal_sound.sql
supabase/migrations/20250211031402_weathered_shrine.sql
supabase/migrations/20250211031657_pink_sky.sql
supabase/migrations/20250211031821_silver_cloud.sql
supabase/migrations/20250211040434_stark_plain.sql
supabase/migrations/20250211044753_bronze_bridge.sql
supabase/migrations/20250211045552_autumn_firefly.sql
supabase/migrations/20250211045734_ancient_heart.sql
supabase/migrations/20250211050441_fragrant_bird.sql
supabase/migrations/20250211063840_autumn_garden.sql
supabase/migrations/20250211064154_cool_limit.sql
supabase/migrations/20250220035045_cold_lake.sql
supabase/migrations/20250220035515_blue_garden.sql
supabase/migrations/20250220072154_copper_spring.sql
supabase/migrations/20250220072504_billowing_palace.sql
supabase/migrations/20250220082156_withered_smoke.sql
supabase/migrations/20250221040154_solitary_hall.sql
supabase/migrations/20250221040842_autumn_ember.sql
supabase/migrations/20250222062007_broken_spark.sql
supabase/migrations/20250307051602_long_sky.sql
tailwind.config.js
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env
.env.local

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23ffc300' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round' transform='rotate(45)'%3E%3Cpath d='M12 6C6.5 6 4 8.5 4 14s2.5 8 8 8 8-2.5 8-8-2.5-8-8-8z'/%3E%3C/svg%3E" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Monomakh+Unicode:wght@400;700&family=Work+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>eon</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['images.unsplash.com'],
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "eon-financial",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.7",
    "lucide-react": "^0.344.0",
    "next": "14.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/node": "^20.11.19",
    "@types/react": "^18.2.57",
    "@types/react-dom": "^18.2.19",
    "autoprefixer": "^10.4.18",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.1.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.3.3"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary-color: #ffc300;
  --primary-dark: #cc9c00;
  --primary-light: #ffe799;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
  background-image: url('/assets/spark-background.jpg');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  background-attachment: fixed;
}

/* Add an overlay to ensure text remains readable */
body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  z-index: -1;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next';
import { Work_Sans } from 'next/font/google';
import './globals.css';
import { AuthProvider } from '@/context/AuthContext';

const workSans = Work_Sans({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-work-sans',
});

export const metadata: Metadata = {
  title: 'EON',
  description: 'Spark your savings journey',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link
          rel="icon"
          type="image/svg+xml"
          href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23ffc300' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round' transform='rotate(45)'%3E%3Cpath d='M12 6C6.5 6 4 8.5 4 14s2.5 8 8 8 8-2.5 8-8-2.5-8-8-8z'/%3E%3C/svg%3E"
        />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin=""
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Monomakh+Unicode:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </head>
      <body className={workSans.className}>
        <AuthProvider>{children}</AuthProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import {
  ArrowLeftRight,
  LineChart,
  PiggyBank,
  Bitcoin,
  Users2,
  Coins,
  ChevronRight,
} from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import { stats, sparkSavings } from '@/data/constants';
import Layout from '@/components/Layout';
import SparkSelection from '@/components/SparkSelection';
import Community from '@/components/Community';

export default function Home() {
  const router = useRouter();
  const { user } = useAuth();
  const [visitorPains, setVisitorPains] = useState<number[]>([]);

  useEffect(() => {
    const saved = localStorage.getItem('visitorSelections');
    if (saved) {
      setVisitorPains(JSON.parse(saved));
    }
  }, []);

  useEffect(() => {
    const handleStorageChange = () => {
      const saved = localStorage.getItem('visitorSelections');
      if (saved) {
        setVisitorPains(JSON.parse(saved));
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  useEffect(() => {
    if (user && user.user_metadata?.selectedPains?.length === 0) {
      const painPointsSection = document.getElementById('pain-points');
      if (painPointsSection) {
        painPointsSection.scrollIntoView({ behavior: 'smooth' });
      }
    }
  }, [user]);

  const handleJoinWaitlist = () => {
    router.push('/signup');
  };

  return (
    <Layout>
      <div className="relative">
        <main className="pt-16">
          {/* Hero Section */}
          <div
            id="hero-section"
            className="relative min-h-screen flex items-center justify-center px-4 sm:px-6 lg:px-8 pt-16 sm:pt-20 pb-12 sm:pb-16 text-center"
          >
            <div className="relative z-10 max-w-7xl mx-auto">
              <div className="text-2xl font-bold mb-4 text-white">
                Are You in Charge of Your Wealth?
              </div>
              <h1 className="text-4xl font-bold tracking-tight text-white sm:text-5xl md:text-6xl mb-12 font-display">
                We Spark your <span className="text-primary-400">Savings</span>
              </h1>

              <div className="mt-6 max-w-2xl mx-auto text-xl space-y-4">
                <span className="text-gray-200 block">
                  We understand Savings can be boring and challenging!
                </span>
                <span className="text-gray-200 block">
                  What features will spark your{' '}
                  <span className="text-white font-bold">Savings</span>?
                </span>
              </div>

              <div className="mt-12 flex justify-center space-x-6">
                <div className="flex flex-col items-center space-y-6">
                  <button
                    onClick={() => {
                      const sparkSavingsSection =
                        document.getElementById('spark-savings');
                      if (sparkSavingsSection) {
                        sparkSavingsSection.scrollIntoView({
                          behavior: 'smooth',
                        });
                      }
                    }}
                    className="group flex items-center gap-2 px-8 py-3 bg-primary-600 text-white rounded-lg font-medium hover:bg-primary-700 transition-all duration-300 shadow-lg shadow-primary-600/20 hover:shadow-primary-600/30 hover:scale-105 text-lg"
                  >
                    <span>Select Spark</span>
                    <ChevronRight className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" />
                  </button>
                </div>
              </div>

              {/* Sliding Text */}
              <div className="relative w-1/2 mx-auto overflow-hidden py-8 mt-24">
                <div className="flex">
                  <div className="flex animate-marquee">
                    <div className="flex items-center space-x-8">
                      <div className="flex items-center">
                        <ArrowLeftRight
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>

                      <div className="flex items-center">
                        <LineChart
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>

                      <div className="flex items-center">
                        <PiggyBank
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Bitcoin
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Coins
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Users2
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>
                    </div>
                    <div className="flex items-center space-x-8">
                      <div className="flex items-center">
                        <ArrowLeftRight
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <LineChart
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <PiggyBank
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Bitcoin
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Coins
                          className="h-5 w-5 text-primary-400"
                          strokeWidth={1.5}
                        />
                      </div>
                      <div className="flex items-center">
                        <Users2
                          className="h-5 w-5 text-white"
                          strokeWidth={1.5}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Social Proof Stats */}
              <div className="mt-12 sm:mt-16 border-t border-gray-100/20 pt-8">
                <dl className="grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-3">
                  {stats.map((stat) => (
                    <div
                      key={stat.id}
                      className="mx-auto flex max-w-xs flex-col gap-y-2"
                    >
                      <dt className="text-base leading-7 text-gray-300 flex items-center justify-center gap-2">
                        <stat.icon className="h-5 w-5 text-primary-400" />
                        {stat.name}
                      </dt>
                      <dd className="text-2xl font-bold tracking-tight text-white font-display text-center">
                        {stat.value}
                      </dd>
                    </div>
                  ))}
                </dl>
              </div>
            </div>
          </div>

          {/* About Section */}
          <div
            id="about-section"
            className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24"
          >
            <div className="text-center mb-16">
              <h1 className="text-4xl font-bold text-white mb-6 font-display">
                We Proactively{' '}
                <span className="text-primary-400">Empower Your Savings!</span>
              </h1>
            </div>

            <div className="max-w-3xl mx-auto">
              <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-12 shadow-xl border border-white/20">
                <div className="prose prose-lg mx-auto">
                  <div className="space-y-12">
                    <div>
                      <h2 className="text-2xl font-semibold text-white mb-4">
                        Our Mission
                      </h2>
                      <p className="text-gray-200 leading-relaxed">
                        At{' '}
                        <span className="font-bold text-primary-400">
                          eon financial
                        </span>
                        , our mission is to transform the savings experience,
                        making it engaging and empowering for everyone. We
                        believe that saving money shouldn't be a struggle;
                        instead, it should be a seamless journey towards
                        financial stability and growth.
                      </p>
                    </div>

                    <div>
                      <h2 className="text-2xl font-semibold text-white mb-4">
                        Your Voice Matters
                      </h2>
                      <p className="text-gray-200 leading-relaxed">
                        We know that every individual has unique financial
                        challenges and aspirations. That's why we encourage you
                        to share your thoughts and experiences with us. Your
                        insights are crucial in helping us design features and
                        tools that genuinely meet your needs.
                      </p>
                    </div>

                    <div>
                      <h2 className="text-2xl font-semibold text-white mb-4">
                        Join the Movement
                      </h2>
                      <p className="text-gray-200 leading-relaxed">
                        Become a part of the{' '}
                        <span className="font-bold text-primary-400">
                          eon financial
                        </span>{' '}
                        community as we revolutionize the way people save.
                        Together, we'll develop strategies that truly reflect
                        your priorities and enable you to cultivate your wealth
                        efficiently.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Spark Selection Section */}
          <div
            id="spark-savings"
            className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-16"
          >
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold text-white font-display">
                Sparks
              </h2>
              <div className="mt-4">
                <p className="text-lg text-gray-200">
                  Select up to 2 sparks you want us to build
                </p>
                {user && (
                  <p className="mt-2 text-sm text-primary-400 font-medium">
                    Click "Update Sparks" after making your selection
                  </p>
                )}
              </div>
            </div>

            <SparkSelection />

            {!user && visitorPains.length > 0 && (
              <div className="mt-8 text-center">
                <button
                  onClick={handleJoinWaitlist}
                  className="mt-6 bg-primary-600 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-primary-700 transition-all duration-300 font-display group hover:scale-105 shadow-xl shadow-primary-600/20 hover:shadow-primary-600/30 flex items-center mx-auto space-x-2"
                >
                  <span>Join Waitlist</span>
                  <ChevronRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                </button>
              </div>
            )}
          </div>

          {/* Community Section */}
          <Community />
        </main>

        {/* Footer */}
        <footer className="mt-16 border-t border-white/20">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">
                  About eon
                </h3>
                <p className="text-gray-300">
                  Empowering your financial journey through innovative savings
                  solutions.
                </p>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">
                  Quick Links
                </h3>
                <ul className="space-y-2">
                  <li>
                    <button
                      onClick={() => {
                        const aboutSection =
                          document.getElementById('about-section');
                        if (aboutSection)
                          aboutSection.scrollIntoView({ behavior: 'smooth' });
                      }}
                      className="text-gray-300 hover:text-primary-400 transition-colors"
                    >
                      About Us
                    </button>
                  </li>
                  <li>
                    <button
                      onClick={() => {
                        const communitySection =
                          document.getElementById('community-section');
                        if (communitySection)
                          communitySection.scrollIntoView({
                            behavior: 'smooth',
                          });
                      }}
                      className="text-gray-300 hover:text-primary-400 transition-colors"
                    >
                      Community
                    </button>
                  </li>
                  <li>
                    <button
                      onClick={handleJoinWaitlist}
                      className="text-gray-300 hover:text-primary-400 transition-colors"
                    >
                      Join Waitlist
                    </button>
                  </li>
                </ul>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">
                  Contact
                </h3>
                <p className="text-gray-300">
                  Get in touch? Reach out at contact@eonfinancial.co
                </p>
              </div>
            </div>
            <div className="mt-8 pt-8 border-t border-white/20">
              <p className="text-center text-gray-300">
                © {new Date().getFullYear()} eon financial. All rights reserved.
              </p>
            </div>
          </div>
        </footer>
      </div>
    </Layout>
  );
}

================
File: src/app/signin/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ArrowRight } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import Layout from '@/components/Layout';

export default function SignIn() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const { signIn } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const [redirecting, setRedirecting] = useState(false);

  useEffect(() => {
    const message = searchParams.get('message');
    const email = searchParams.get('email');
    if (email) setEmail(email);
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      const { error: signInError } = await signIn(email, password);

      if (signInError?.message === 'User not found') {
        setRedirecting(true);
        router.push(
          '/signup?message=Please sign up to join our community&email=' +
            encodeURIComponent(email)
        );
        return;
      } else if (signInError) {
        setError('Invalid email or password');
        return;
      }

      setRedirecting(true);
      router.push('/#community-section');
    } catch (err) {
      setError('Something went wrong, please try again');
    } finally {
      if (!redirecting) {
        setLoading(false);
      }
    }
  };

  return (
    <Layout>
      <div className="min-h-[calc(100vh-4rem)] flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-white font-display">
              Welcome to{' '}
              <span className="text-primary-500">
                eon <span className="text-primary-500">financial</span>
              </span>
            </h2>
            <p className="mt-2 text-white">
              Share your banking experiences and connect with others
            </p>
          </div>

          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            {error && (
              <div className="bg-red-50 text-red-600 p-3 rounded-lg text-sm">
                {error}
              </div>
            )}

            <div className="space-y-4">
              <div>
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-white mb-1"
                >
                  Email address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-primary-600 focus:border-primary-600 focus:z-10 sm:text-sm bg-white shadow-sm"
                  placeholder="you@example.com"
                />
              </div>

              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-white mb-1"
                >
                  Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-primary-600 focus:border-primary-600 focus:z-10 sm:text-sm bg-white shadow-sm"
                  placeholder="••••••••"
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white"></div>
                ) : (
                  <>
                    <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                      <ArrowRight
                        className="h-5 w-5 text-primary-500 group-hover:text-primary-400"
                        aria-hidden="true"
                      />
                    </span>
                    Sign in
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
}

================
File: src/app/signup/page.tsx
================
'use client';

import { useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ArrowRight } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import Layout from '@/components/Layout';

export default function SignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nickname, setNickname] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const { signUp } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const [redirecting, setRedirecting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      const savedSelections = localStorage.getItem('visitorSelections');
      const selectedPains = savedSelections ? JSON.parse(savedSelections) : [];

      const { user, error: signUpError } = await signUp(
        email,
        password,
        nickname,
        selectedPains
      );

      if (signUpError?.message === 'User already exists') {
        setRedirecting(true);
        router.push(
          '/signin?message=Please sign in with your existing account&email=' +
            encodeURIComponent(email)
        );
        return;
      } else if (signUpError) {
        setError(signUpError.message);
        return;
      }

      if (user) {
        setRedirecting(true);
        router.push('/#community-section');
      }
    } catch (err) {
      setError('Something went wrong, please try again');
    } finally {
      if (!redirecting) {
        setLoading(false);
      }
    }
  };

  return (
    <Layout>
      <div className="min-h-[calc(100vh-4rem)] flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-white font-display">
              Join{' '}
              <span className="text-primary-500">
                eon <span className="text-primary-500">financial</span>
              </span>
            </h2>
            <p className="mt-2 text-white">
              Create an account to join our community
            </p>
          </div>

          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            {error && (
              <div className="bg-red-50 text-red-600 p-3 rounded-lg text-sm">
                {error}
              </div>
            )}

            <div className="space-y-4">
              <div>
                <label
                  htmlFor="nickname"
                  className="block text-sm font-medium text-white mb-1"
                >
                  Nickname
                </label>
                <input
                  id="nickname"
                  name="nickname"
                  type="text"
                  required
                  value={nickname}
                  onChange={(e) => setNickname(e.target.value)}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-primary-600 focus:border-primary-600 focus:z-10 sm:text-sm bg-white shadow-sm"
                  placeholder="Choose a nickname"
                />
              </div>

              <div>
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-white mb-1"
                >
                  Email address
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-primary-600 focus:border-primary-600 focus:z-10 sm:text-sm bg-white shadow-sm"
                  placeholder="you@example.com"
                />
              </div>

              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-white mb-1"
                >
                  Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="new-password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-primary-600 focus:border-primary-600 focus:z-10 sm:text-sm bg-white shadow-sm"
                  placeholder="••••••••"
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white"></div>
                ) : (
                  <>
                    <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                      <ArrowRight
                        className="h-5 w-5 text-primary-500 group-hover:text-primary-400"
                        aria-hidden="true"
                      />
                    </span>
                    Sign up
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
}

================
File: src/components/AuthDialog.tsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { LogIn } from 'lucide-react';

interface AuthDialogProps {
  isOpen: boolean;
  onClose: () => void;
  message: string;
}

const AuthDialog: React.FC<AuthDialogProps> = ({ isOpen, onClose, message }) => {
  const navigate = useNavigate();

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 max-w-sm w-full shadow-xl animate-fadeIn">
        <div className="flex flex-col items-center text-center space-y-4">
          <div className="p-3 bg-primary-100 dark:bg-primary-900/30 rounded-full">
            <LogIn className="w-6 h-6 text-primary-600" />
          </div>
          
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
            Sign in Required
          </h3>
          
          <p className="text-gray-600 dark:text-gray-400">
            {message}
          </p>

          <div className="flex gap-3 w-full">
            <button
              onClick={onClose}
              className="flex-1 px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={() => {
                onClose();
                navigate('/signin', { replace: true });
              }}
              className="flex-1 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
            >
              Sign in
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AuthDialog;

================
File: src/components/Community.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import {
  ThumbsUp,
  Edit2,
  Trash2,
  User,
  Clock,
  MessageCircle,
  ChevronDown,
  ChevronUp,
} from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/lib/supabase';

interface Reply {
  id: string;
  content: string;
  author: string;
  date: string;
  likes: number;
  isLiked: boolean;
}

interface Post {
  id: string;
  content: string;
  author: string;
  date: string;
  likes: number;
  isLiked: boolean;
  isEditing?: boolean;
  replies: Reply[];
  showReplies?: boolean;
}

export default function Community() {
  const router = useRouter();
  const { user } = useAuth();
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(true);
  const [newPost, setNewPost] = useState('');
  const [newReply, setNewReply] = useState<{ [key: string]: string }>({});
  const [editingPost, setEditingPost] = useState<string | null>(null);
  const [editingReply, setEditingReply] = useState<string | null>(null);
  const [editContent, setEditContent] = useState('');
  const [editReplyContent, setEditReplyContent] = useState('');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select(
          `
          *,
          profiles:author_id (nickname),
          likes!likes_post_id_fkey (
            user_id
          ),
          replies (
            id,
            content,
            created_at,
            profiles:author_id (nickname),
            likes!likes_reply_id_fkey (
              user_id
            )
          )
        `
        )
        .order('created_at', { ascending: false });

      if (postsError) throw postsError;

      const formattedPosts = postsData.map((post) => ({
        id: post.id,
        content: post.content,
        author: post.profiles.nickname,
        date: new Date(post.created_at).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        }),
        likes: post.likes.length,
        isLiked: user
          ? post.likes.some(
              (like: { user_id: string }) => like.user_id === user.id
            )
          : false,
        replies: post.replies.map(
          (reply: {
            id: any;
            content: any;
            profiles: { nickname: any };
            created_at: string | number | Date;
            likes: { user_id: string }[];
          }) => ({
            id: reply.id,
            content: reply.content,
            author: reply.profiles.nickname,
            date: new Date(reply.created_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            }),
            likes: reply.likes.length,
            isLiked: user
              ? reply.likes.some(
                  (like: { user_id: string }) => like.user_id === user.id
                )
              : false,
          })
        ),
        showReplies: false,
      }));

      setPosts(formattedPosts);
    } catch (error) {
      console.error('Error fetching posts:', error);
      setError('Failed to load posts');
    } finally {
      setLoading(false);
    }
  };

  const handlePostSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      router.push('/signin');
      return;
    }

    if (newPost.trim().length === 0 || newPost.length > 1000) return;

    try {
      const { error } = await supabase.from('posts').insert({
        content: newPost,
        author_id: user.id,
      });

      if (error) throw error;

      await fetchPosts();
      setNewPost('');
    } catch (error) {
      console.error('Error creating post:', error);
      setError('Failed to create post');
    }
  };

  const handleReplySubmit = async (postId: string) => {
    if (!user) {
      router.push('/signin');
      return;
    }

    if (
      !newReply[postId] ||
      newReply[postId].trim().length === 0 ||
      newReply[postId].length > 1000
    )
      return;

    try {
      const { error } = await supabase.from('replies').insert({
        content: newReply[postId],
        post_id: postId,
        author_id: user.id,
      });

      if (error) throw error;

      await fetchPosts();
      setNewReply({ ...newReply, [postId]: '' });
    } catch (error) {
      console.error('Error creating reply:', error);
      setError('Failed to create reply');
    }
  };

  const toggleReplies = (postId: string) => {
    setPosts(
      posts.map((post) => {
        if (post.id === postId) {
          return {
            ...post,
            showReplies: !post.showReplies,
          };
        }
        return post;
      })
    );
  };

  const handleLike = async (postId: string) => {
    if (!user) {
      router.push('/signin');
      return;
    }

    try {
      const post = posts.find((p) => p.id === postId);
      if (!post || post.author === user.user_metadata?.nickname) return;

      if (post.isLiked) {
        await supabase
          .from('likes')
          .delete()
          .match({ post_id: postId, user_id: user.id });
      } else {
        await supabase
          .from('likes')
          .insert({ post_id: postId, user_id: user.id });
      }

      await fetchPosts();
    } catch (error) {
      console.error('Error toggling like:', error);
      setError('Failed to update like');
    }
  };

  const handleReplyLike = async (postId: string, replyId: string) => {
    if (!user) {
      router.push('/signin');
      return;
    }

    try {
      const reply = posts
        .find((p) => p.id === postId)
        ?.replies.find((r) => r.id === replyId);

      if (!reply || reply.author === user.user_metadata?.nickname) return;

      if (reply.isLiked) {
        await supabase
          .from('likes')
          .delete()
          .match({ reply_id: replyId, user_id: user.id });
      } else {
        await supabase
          .from('likes')
          .insert({ reply_id: replyId, user_id: user.id });
      }

      await fetchPosts();
    } catch (error) {
      console.error('Error toggling reply like:', error);
      setError('Failed to update like');
    }
  };

  const handleEdit = async (postId: string) => {
    if (editContent.trim().length === 0 || editContent.length > 1000) return;

    try {
      const { error } = await supabase
        .from('posts')
        .update({ content: editContent })
        .eq('id', postId)
        .eq('author_id', user?.id);

      if (error) throw error;

      await fetchPosts();
      setEditingPost(null);
    } catch (error) {
      console.error('Error updating post:', error);
      setError('Failed to update post');
    }
  };

  const handleEditReply = async (replyId: string) => {
    if (editReplyContent.trim().length === 0 || editReplyContent.length > 1000)
      return;

    try {
      const { error } = await supabase
        .from('replies')
        .update({ content: editReplyContent })
        .eq('id', replyId)
        .eq('author_id', user?.id);

      if (error) throw error;

      await fetchPosts();
      setEditingReply(null);
    } catch (error) {
      console.error('Error updating reply:', error);
      setError('Failed to update reply');
    }
  };

  const handleDelete = async (postId: string) => {
    try {
      const { error } = await supabase
        .from('posts')
        .delete()
        .eq('id', postId)
        .eq('author_id', user?.id);

      if (error) throw error;

      await fetchPosts();
    } catch (error) {
      console.error('Error deleting post:', error);
      setError('Failed to delete post');
    }
  };

  const handleDeleteReply = async (replyId: string) => {
    try {
      const { error } = await supabase
        .from('replies')
        .delete()
        .eq('id', replyId)
        .eq('author_id', user?.id);

      if (error) throw error;

      await fetchPosts();
    } catch (error) {
      console.error('Error deleting reply:', error);
      setError('Failed to delete reply');
    }
  };

  return (
    <div
      id="community-section"
      className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24"
    >
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-white mb-6 font-display">
          Community <span className="text-primary-600">Voices</span>
        </h1>
        <p className="text-xl text-gray-50">
          Join Converstaion! What can Spark Your Saving Journey?
        </p>
      </div>

      {error && (
        <div className="mb-4 p-3 bg-red-50 text-red-600 rounded-lg text-sm">
          {error}
        </div>
      )}

      <form onSubmit={handlePostSubmit} className="mb-12">
        <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
          <textarea
            value={newPost}
            onChange={(e) => setNewPost(e.target.value)}
            placeholder="Share your banking experience... (1000 characters max)"
            className="w-full p-4 rounded-lg border border-gray-200 bg-gray-50 text-gray-900 focus:ring-2 focus:ring-primary-600 focus:border-transparent transition-colors resize-none"
            rows={4}
            maxLength={1000}
          />
          <div className="flex items-center justify-between mt-4">
            <span className="text-sm text-gray-500">
              {1000 - newPost.length} characters remaining
            </span>
            <button
              type="submit"
              className="bg-primary-600 text-white px-6 py-2 rounded-lg hover:bg-primary-700 transition-all duration-300"
            >
              Post
            </button>
          </div>
        </div>
      </form>

      <div className="space-y-6">
        {loading ? (
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
          </div>
        ) : posts.length === 0 ? (
          <div className="text-center py-8 text-gray-600">
            No posts yet. Be the first to share your thoughts!
          </div>
        ) : (
          posts.map((post) => (
            <div
              key={post.id}
              className="bg-white rounded-xl p-6 shadow-lg border border-gray-100"
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <User className="w-5 h-5 text-gray-500" />
                  <span className="font-medium text-gray-900">
                    {post.author}
                  </span>
                </div>
                <div className="flex items-center space-x-2 text-sm text-gray-500">
                  <Clock className="w-4 h-4" />
                  <span>{post.date}</span>
                </div>
              </div>

              {editingPost === post.id ? (
                <div className="space-y-4">
                  <textarea
                    value={editContent}
                    onChange={(e) => setEditContent(e.target.value)}
                    className="w-full p-4 rounded-lg border border-gray-200 bg-gray-50 text-gray-900 focus:ring-2 focus:ring-primary-600 focus:border-transparent transition-colors resize-none"
                    rows={4}
                    maxLength={1000}
                  />
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => setEditingPost(null)}
                      className="px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={() => handleEdit(post.id)}
                      className="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors"
                    >
                      Save
                    </button>
                  </div>
                </div>
              ) : (
                <p className="text-gray-600 mb-4">{post.content}</p>
              )}

              <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-100">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => handleLike(post.id)}
                    disabled={user?.user_metadata?.nickname === post.author}
                    className={`flex items-center space-x-2 transition-colors ${
                      post.isLiked
                        ? 'text-primary-600'
                        : 'text-gray-500 hover:text-primary-600'
                    }`}
                  >
                    <ThumbsUp className="w-5 h-5" />
                    <span>{post.likes}</span>
                  </button>

                  <button
                    onClick={() => toggleReplies(post.id)}
                    className="flex items-center space-x-2 text-gray-500 hover:text-primary-600 transition-colors"
                  >
                    <MessageCircle className="w-5 h-5" />
                    <span>{post.replies.length}</span>
                    {post.showReplies ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </button>
                </div>

                {user && post.author === user.user_metadata?.nickname && (
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => {
                        setEditingPost(post.id);
                        setEditContent(post.content);
                      }}
                      className="p-2 text-gray-500 hover:text-primary-600 transition-colors"
                    >
                      <Edit2 className="w-5 h-5" />
                    </button>
                    <button
                      onClick={() => handleDelete(post.id)}
                      className="p-2 text-gray-500 hover:text-red-600 transition-colors"
                    >
                      <Trash2 className="w-5 h-5" />
                    </button>
                  </div>
                )}
              </div>

              {post.showReplies && (
                <div className="mt-4 space-y-4">
                  {/* Only show reply input if user is not the post author */}
                  {user && post.author !== user.user_metadata?.nickname && (
                    <div className="pl-6 border-l-2 border-gray-100">
                      <div className="flex space-x-2">
                        <textarea
                          value={newReply[post.id] || ''}
                          onChange={(e) =>
                            setNewReply({
                              ...newReply,
                              [post.id]: e.target.value,
                            })
                          }
                          placeholder="Write a reply... (1000 characters max)"
                          className="flex-1 p-2 rounded-lg border border-gray-200 bg-gray-50 text-gray-900 focus:ring-2 focus:ring-primary-600 focus:border-transparent transition-colors resize-none text-sm"
                          rows={2}
                          maxLength={1000}
                        />
                        <button
                          onClick={() => handleReplySubmit(post.id)}
                          disabled={
                            !newReply[post.id] ||
                            newReply[post.id].trim().length === 0
                          }
                          className="self-end px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                        >
                          Reply
                        </button>
                      </div>
                    </div>
                  )}

                  {post.replies.map((reply) => (
                    <div
                      key={reply.id}
                      className="pl-6 border-l-2 border-gray-100"
                    >
                      <div className="bg-gray-50 rounded-lg p-4">
                        {editingReply === reply.id ? (
                          <div className="space-y-4">
                            <textarea
                              value={editReplyContent}
                              onChange={(e) =>
                                setEditReplyContent(e.target.value)
                              }
                              className="w-full p-4 rounded-lg border border-gray-200 bg-gray-50 text-gray-900 focus:ring-2 focus:ring-primary-600 focus:border-transparent transition-colors resize-none"
                              rows={3}
                              maxLength={1000}
                            />
                            <div className="flex justify-end space-x-2">
                              <button
                                onClick={() => setEditingReply(null)}
                                className="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 transition-colors"
                              >
                                Cancel
                              </button>
                              <button
                                onClick={() => handleEditReply(reply.id)}
                                className="px-3 py-1.5 text-sm bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
                              >
                                Save
                              </button>
                            </div>
                          </div>
                        ) : (
                          <>
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center space-x-2">
                                <User className="w-4 h-4 text-gray-500" />
                                <span className="font-medium text-gray-900 text-sm">
                                  {reply.author}
                                </span>
                              </div>
                              <div className="flex items-center space-x-2 text-xs text-gray-500">
                                <Clock className="w-3 h-3" />
                                <span>{reply.date}</span>
                              </div>
                            </div>

                            <p className="text-gray-600 text-sm">
                              {reply.content}
                            </p>

                            <div className="flex items-center justify-between mt-2">
                              <button
                                onClick={() =>
                                  handleReplyLike(post.id, reply.id)
                                }
                                disabled={
                                  user?.user_metadata?.nickname === reply.author
                                }
                                className={`flex items-center space-x-1 text-sm transition-colors ${
                                  reply.isLiked
                                    ? 'text-primary-600'
                                    : 'text-gray-500 hover:text-primary-600'
                                }`}
                              >
                                <ThumbsUp className="w-4 h-4" />
                                <span>{reply.likes}</span>
                              </button>

                              {user &&
                                reply.author ===
                                  user.user_metadata?.nickname && (
                                  <div className="flex items-center space-x-2">
                                    <button
                                      onClick={() => {
                                        setEditingReply(reply.id);
                                        setEditReplyContent(reply.content);
                                      }}
                                      className="p-1 text-gray-500 hover:text-primary-600 transition-colors"
                                    >
                                      <Edit2 className="w-4 h-4" />
                                    </button>
                                    <button
                                      onClick={() =>
                                        handleDeleteReply(reply.id)
                                      }
                                      className="p-1 text-gray-500 hover:text-red-600 transition-colors"
                                    >
                                      <Trash2 className="w-4 h-4" />
                                    </button>
                                  </div>
                                )}
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
}

================
File: src/components/ErrorBoundary.tsx
================
import React from 'react';
import { ErrorBoundaryProps, ErrorBoundaryState } from '../types';

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
          <div className="text-center p-8">
            <h1 className="text-2xl font-bold text-red-600 mb-4">Something went wrong</h1>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {this.state.error?.message || 'An unexpected error occurred'}
            </p>
            <button
              onClick={() => window.location.reload()}
              className="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors"
            >
              Reload Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: src/components/FeatureSelection.tsx
================
import React from 'react';
import { CheckCircle2 } from 'lucide-react';
import { Feature } from '../types';

interface FeatureSelectionProps {
  title: string;
  features: Feature[];
  selectedFeatures: number[];
  onFeatureClick: (id: number) => void;
}

const FeatureSelection: React.FC<FeatureSelectionProps> = ({
  title,
  features,
  selectedFeatures,
  onFeatureClick,
}) => {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-white font-display">
          {title}
        </h2>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {features.map((feature) => {
          const isSelected = selectedFeatures.includes(feature.id);
          
          return (
            <button
              key={feature.id}
              onClick={() => onFeatureClick(feature.id)}
              className={`
                relative p-6 rounded-xl border-2 text-left transition-all duration-300 hover:scale-[1.02]
                ${isSelected 
                  ? 'border-primary-600 bg-primary-50 dark:bg-primary-900/20 shadow-lg shadow-primary-600/10' 
                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800/50'
                }
              `}
            >
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white font-display">
                {feature.name}
              </h3>
              {isSelected && (
                <CheckCircle2 className="absolute top-4 right-4 h-6 w-6 text-primary-600" />
              )}
            </button>
          );
        })}
      </div>

      {selectedFeatures.length > 0 && (
        <div className="mt-8 text-center">
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {selectedFeatures.length} pain{selectedFeatures.length !== 1 ? 's' : ''} selected
          </p>
        </div>
      )}
    </div>
  );
};

export default FeatureSelection;

================
File: src/components/Layout.tsx
================
'use client';

import React from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Menu, X, LogOut } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { user, signOut } = useAuth();
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  const pathname = usePathname();

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  const handleSignOut = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const scrollToSection = (sectionId: string) => {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      <div className="relative">
        {/* Header */}
        <header className="fixed w-full bg-black/50 backdrop-blur-md z-50 border-b border-white/20">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
            <div className="flex items-center justify-between h-16">
              {/* Logo */}
              <Link href="/" className="flex items-center space-x-2">
                <span className="font-sans font-bold text-4xl text-white tracking-wider">
                  EON
                </span>
              </Link>

              {/* Navigation */}
              <nav className="hidden md:flex items-center space-x-8">
                {[
                  { name: 'Home', href: '/', section: 'hero-section' },
                  {
                    name: 'About',
                    href: '/#about-section',
                    section: 'about-section',
                  },
                  {
                    name: 'Community',
                    href: '/#community-section',
                    section: 'community-section',
                  },
                ].map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    onClick={(e) => {
                      if (pathname === '/' && item.section) {
                        e.preventDefault();
                        scrollToSection(item.section);
                      }
                    }}
                    className="text-gray-300 hover:text-primary-400 font-medium transition-colors"
                  >
                    {item.name}
                  </Link>
                ))}
              </nav>

              {/* Auth Actions */}
              <div className="hidden md:flex items-center space-x-4">
                {user ? (
                  <button
                    onClick={handleSignOut}
                    className="flex items-center space-x-2 text-gray-300 hover:text-primary-400 font-medium transition-colors"
                  >
                    <span className="text-primary-400">
                      {user.user_metadata?.nickname}
                    </span>
                    <LogOut className="w-5 h-5" />
                    <span>Sign Out</span>
                  </button>
                ) : (
                  <Link
                    href="/signin"
                    className="text-gray-300 hover:text-primary-400 font-medium transition-colors"
                  >
                    Sign In
                  </Link>
                )}
              </div>

              {/* Mobile Menu Button */}
              <div className="flex items-center space-x-4 md:hidden">
                <button
                  onClick={toggleMenu}
                  className="p-2 rounded-lg text-gray-300 hover:bg-white/10 transition-colors"
                >
                  {isMenuOpen ? (
                    <X className="w-6 h-6" />
                  ) : (
                    <Menu className="w-6 h-6" />
                  )}
                </button>
              </div>

              {/* Mobile Menu */}
              <div
                className={`
                  fixed inset-x-0 top-16 p-4 bg-black/50 backdrop-blur-md border-b border-white/20
                  transform transition-transform duration-300 ease-in-out md:hidden
                  ${isMenuOpen ? 'translate-y-0' : '-translate-y-full'}
                `}
              >
                <nav className="flex flex-col space-y-4">
                  {[
                    { name: 'Home', href: '/', section: 'hero-section' },
                    {
                      name: 'About',
                      href: '/#about-section',
                      section: 'about-section',
                    },
                    {
                      name: 'Community',
                      href: '/#community-section',
                      section: 'community-section',
                    },
                  ].map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      onClick={(e) => {
                        setIsMenuOpen(false);
                        if (pathname === '/' && item.section) {
                          e.preventDefault();
                          scrollToSection(item.section);
                        }
                      }}
                      className="text-gray-300 hover:text-primary-400 font-medium transition-colors px-4 py-2 rounded-lg hover:bg-white/10"
                    >
                      {item.name}
                    </Link>
                  ))}

                  <div className="pt-4 border-t border-white/20">
                    {user ? (
                      <button
                        onClick={() => {
                          handleSignOut();
                          setIsMenuOpen(false);
                        }}
                        className="flex items-center space-x-4 w-full px-4 py-2 text-gray-300 hover:text-primary-400 font-medium transition-colors rounded-lg hover:bg-white/10"
                      >
                        <span className="text-primary-400">
                          {user.user_metadata?.nickname}
                        </span>
                        <LogOut className="w-5 h-5" />
                        <span>Sign Out</span>
                      </button>
                    ) : (
                      <Link
                        href="/signin"
                        onClick={() => setIsMenuOpen(false)}
                        className="block px-4 py-2 text-gray-300 hover:text-primary-400 font-medium transition-colors rounded-lg hover:bg-white/10"
                      >
                        Sign In
                      </Link>
                    )}
                  </div>
                </nav>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="pt-16">{children}</main>
      </div>
    </div>
  );
};

export default Layout;

================
File: src/components/ProtectedRoute.tsx
================
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (!user) {
    return <Navigate to="/signin" />;
  }

  return <>{children}</>;
}

================
File: src/components/SparkSelection.tsx
================
'use client';

import React, { useState, useEffect } from 'react';
import { CheckCircle2, AlertCircle } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/lib/supabase';
import { sparkSavings } from '@/data/constants';

interface SparkSelectionProps {
  onSelectionChange?: (selections: number[]) => void;
  maxSelections?: number;
  showUpdateButton?: boolean;
  className?: string;
}

const SparkSelection: React.FC<SparkSelectionProps> = ({
  onSelectionChange,
  maxSelections = 2,
  showUpdateButton = true,
  className = '',
}) => {
  const { user } = useAuth();
  const [selectedSparks, setSelectedSparks] = useState<number[]>([]);
  const [tempSelections, setTempSelections] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [updateSuccess, setUpdateSuccess] = useState(false);

  useEffect(() => {
    const fetchUserSelections = async () => {
      if (!user) {
        const savedSelections = localStorage.getItem('visitorSelections');
        const selections = savedSelections ? JSON.parse(savedSelections) : [];
        setSelectedSparks(selections);
        setTempSelections(selections);
        return;
      }

      try {
        const { data, error } = await supabase
          .from('user_selections')
          .select('selections')
          .eq('user_id', user.id)
          .single();

        if (error) throw error;

        const selections = data?.selections || [];
        setSelectedSparks(selections);
        setTempSelections(selections);
      } catch (error) {
        console.error('Error fetching user selections:', error);
      }
    };

    fetchUserSelections();
  }, [user]);

  const showError = (message: string) => {
    setError(message);
    setTimeout(() => setError(null), 3000);
  };

  const showSuccess = () => {
    setUpdateSuccess(true);
    setTimeout(() => setUpdateSuccess(false), 3000);
  };

  const handleSparkSelection = (sparkId: number) => {
    let newSelections: number[];

    if (tempSelections.includes(sparkId)) {
      newSelections = tempSelections.filter((id) => id !== sparkId);
    } else {
      if (tempSelections.length >= maxSelections) {
        showError(`You can only select up to ${maxSelections} sparks`);
        return;
      }
      newSelections = [...tempSelections, sparkId];
    }

    setTempSelections(newSelections);

    if (!user) {
      localStorage.setItem('visitorSelections', JSON.stringify(newSelections));
      setSelectedSparks(newSelections);
    }

    if (onSelectionChange) {
      onSelectionChange(newSelections);
    }
  };

  const handleUpdateSparks = async () => {
    if (!user) return;

    setLoading(true);
    try {
      const { error } = await supabase.from('user_selections').upsert(
        {
          user_id: user.id,
          selections: tempSelections,
        },
        {
          onConflict: 'user_id',
        }
      );

      if (error) throw error;

      setSelectedSparks(tempSelections);
      showSuccess();
    } catch (error) {
      console.error('Error updating selections:', error);
      showError('Failed to update selections');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={className}>
      {error && (
        <div className="mb-4 p-3 bg-red-50 text-red-600 rounded-lg flex items-center gap-2 animate-fadeIn">
          <AlertCircle className="w-5 h-5" />
          <span>{error}</span>
        </div>
      )}
      {updateSuccess && (
        <div className="mb-4 p-3 bg-green-50 text-green-600 rounded-lg flex items-center gap-2 animate-fadeIn">
          <CheckCircle2 className="w-5 h-5" />
          <span>Spark selections updated successfully!</span>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {sparkSavings.map((spark) => {
          const isSelected = tempSelections.includes(spark.id);

          return (
            <button
              key={spark.id}
              onClick={() => handleSparkSelection(spark.id)}
              className={`
                relative p-6 sm:p-8 rounded-xl border-2 text-left transition-all duration-300 hover:scale-[1.01] group
                min-h-[160px] sm:min-h-[200px] flex flex-col
                ${
                  isSelected
                    ? 'border-primary-600 bg-primary-600 text-white shadow-lg shadow-primary-600/20'
                    : 'border-gray-200 bg-white/10 hover:border-gray-300'
                }
              `}
            >
              <div className="relative flex-1">
                <div className="transition-all duration-300 group-hover:opacity-0">
                  <h3
                    className={`text-lg sm:text-xl font-semibold font-display pr-6 mb-2 ${
                      isSelected ? 'text-white' : 'text-white'
                    }`}
                  >
                    {spark.name}
                  </h3>
                </div>
                <div
                  className={`
                  absolute inset-0 opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-lg p-4
                  overflow-y-auto max-h-full scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent
                  ${isSelected ? 'bg-primary-600 text-white' : 'bg-white/15 '}
                `}
                >
                  <p
                    className={`text-sm sm:text-base leading-relaxed ${
                      isSelected ? 'text-white' : 'text-white'
                    }`}
                  >
                    {spark.description}
                  </p>
                </div>
              </div>
              {isSelected && (
                <CheckCircle2 className="absolute top-4 right-4 h-5 w-5 sm:h-6 sm:w-6 text-white" />
              )}
            </button>
          );
        })}
      </div>

      {showUpdateButton && user && (
        <div className="mt-8 flex justify-center">
          <button
            onClick={handleUpdateSparks}
            disabled={loading}
            className={`
              bg-primary-600 text-white px-8 sm:px-12 py-3 sm:py-4 rounded-lg text-lg sm:text-xl font-bold 
              hover:bg-primary-700 transition-all duration-300 font-display group hover:scale-105 
              shadow-xl shadow-primary-600/20 hover:shadow-primary-600/30 flex items-center space-x-3 
              disabled:opacity-50 disabled:cursor-not-allowed
            `}
          >
            {loading ? (
              <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white" />
            ) : (
              <span>Update Sparks</span>
            )}
          </button>
        </div>
      )}
    </div>
  );
};

export default SparkSelection;

================
File: src/context/AuthContext.tsx
================
'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { supabase } from '@/lib/supabase'
import type { User, AuthError } from '@supabase/supabase-js'

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>;
  signUp: (email: string, password: string, nickname: string, selectedPains?: number[]) => Promise<{ user: User | null; error: AuthError | null }>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {    
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null)
      setLoading(false)
    })

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null)
    })
    
    return () => subscription.unsubscribe()
  }, [])

  const signIn = async (email: string, password: string) => {
    const { error: signInError } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    
    if (signInError) {
      if (signInError.message === 'Invalid login credentials') {
        return { error: new Error('User not found') }
      } else {
        return { error: new Error(signInError.message) }
      }
    }
    
    return { error: null }
  }

  const signUp = async (
    email: string,
    password: string,
    nickname: string,
    selectedPains: number[] = []
  ) => {
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            nickname
          }
        }
      })

      if (error?.message?.includes('User already registered')) {
        return { user: null, error: new Error('User already exists') }
      }

      if (data.user) {
        const { error: selectionsError } = await supabase
          .from('user_selections')
          .insert({
            user_id: data.user.id,
            selections: selectedPains
          })

        if (selectionsError && data.user) {
          console.error('Error storing user selections:', selectionsError)
          return { user: data.user, error: selectionsError }
        }
      }

      return { user: data.user, error: error || null }
    } catch (err) {
      console.error('Error in signUp:', err)
      return { user: null, error: err as Error }
    }
  }

  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  }

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

================
File: src/data/constants.ts
================
import { Users, Star, Shield } from 'lucide-react';
import { Feature, Stat } from '../types';

// Stats for social proof
export const stats: Stat[] = [
  { id: 1, name: 'Waitlist Joined', value: '1K+', icon: Users },
  { id: 2, name: 'Customer Rating', value: '4.9/5', icon: Star },
  { id: 3, name: 'Bank-grade Security', value: '100%', icon: Shield },
];

// Combined pain points from both savings and banking
export const sparkSavings: Feature[] = [
  {
    id: 1,
    name: 'Cashback to Savings',
    description:
      'Every dollar you spend earns cashback points, which are automatically deposited into your savings account to earn interest. It will spark your Savings!',
  },
  {
    id: 2,
    name: 'Wise Debt Management',
    description:
      'Debt is a part of modern life—credit cards, mortgages, and student loans can be valuable financial tools when managed wisely. However, mismanagement can result in challenges.',
  },
  {
    id: 3,
    name: 'Smart Spending Management',
    description:
      'Seal your spending leaks! For example, we uncovers unnecessary subscriptions. Or automates bill payments, categorize spending into Want vs. Need.',
  },
  {
    id: 4,
    name: 'Essential Expense Notification',
    description:
      'Receive instant notifications on sales items as soon as you walk-in to grocery stores in our partnership (and it earns more points too). Or when you drive into random gas station, what if you receive notifications about nearby gas stations offering cheaper prices.',
  },
];

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary-color: #ffc300;
  --primary-dark: #cc9c00;
  --primary-light: #ffe799;
}

:root {
  font-family: 'Work Sans', system-ui, sans-serif;
  line-height: 1.5;
  font-weight: 400;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}

================
File: src/lib/database.types.ts
================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          username: string
          avatar_url: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          username: string
          avatar_url?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          username?: string
          avatar_url?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      posts: {
        Row: {
          id: string
          content: string
          author_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          content: string
          author_id: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          content?: string
          author_id?: string
          created_at?: string
          updated_at?: string
        }
      }
      replies: {
        Row: {
          id: string
          content: string
          post_id: string
          author_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          content: string
          post_id: string
          author_id: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          content?: string
          post_id?: string
          author_id?: string
          created_at?: string
          updated_at?: string
        }
      }
      likes: {
        Row: {
          id: string
          user_id: string
          post_id: string | null
          reply_id: string | null
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          post_id?: string | null
          reply_id?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          post_id?: string | null
          reply_id?: string | null
          created_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
  }
}

================
File: src/lib/supabase.ts
================
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)

================
File: src/types/index.ts
================
// Common types used across components
export interface Feature {
  id: number;
  name: string;
  description: string;
}

export interface Stat {
  id: number;
  name: string;
  value: string;
  icon: React.ComponentType<{ className?: string }>;
}

export interface ThemeContextType {
  isDark: boolean;
  toggleTheme: () => void;
}

export interface ErrorBoundaryProps {
  children: React.ReactNode;
}

export interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: supabase/migrations/20250211012758_royal_fog.sql
================
/*
  # Initial Schema Setup

  1. New Tables
    - `profiles`
      - `id` (uuid, primary key, references auth.users)
      - `username` (text, unique)
      - `avatar_url` (text)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `posts`
      - `id` (uuid, primary key)
      - `content` (text)
      - `author_id` (uuid, references profiles)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `replies`
      - `id` (uuid, primary key)
      - `content` (text)
      - `post_id` (uuid, references posts)
      - `author_id` (uuid, references profiles)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `likes`
      - `id` (uuid, primary key)
      - `user_id` (uuid, references profiles)
      - `post_id` (uuid, references posts, nullable)
      - `reply_id` (uuid, references replies, nullable)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users
    - Secure profile creation/updates
*/

-- Create profiles table
CREATE TABLE IF NOT EXISTS profiles (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  username text UNIQUE NOT NULL,
  avatar_url text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create posts table
CREATE TABLE IF NOT EXISTS posts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  content text NOT NULL,
  author_id uuid REFERENCES profiles ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create replies table
CREATE TABLE IF NOT EXISTS replies (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  content text NOT NULL,
  post_id uuid REFERENCES posts ON DELETE CASCADE NOT NULL,
  author_id uuid REFERENCES profiles ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create likes table
CREATE TABLE IF NOT EXISTS likes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles ON DELETE CASCADE NOT NULL,
  post_id uuid REFERENCES posts ON DELETE CASCADE,
  reply_id uuid REFERENCES replies ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  -- Ensure a like is either for a post OR a reply, not both
  CONSTRAINT like_target_check CHECK (
    (post_id IS NOT NULL AND reply_id IS NULL) OR
    (post_id IS NULL AND reply_id IS NOT NULL)
  ),
  -- Prevent duplicate likes
  CONSTRAINT unique_post_like UNIQUE (user_id, post_id),
  CONSTRAINT unique_reply_like UNIQUE (user_id, reply_id)
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE replies ENABLE ROW LEVEL SECURITY;
ALTER TABLE likes ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Public profiles are viewable by everyone"
  ON profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can insert their own profile"
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

-- Posts policies
CREATE POLICY "Posts are viewable by everyone"
  ON posts FOR SELECT
  USING (true);

CREATE POLICY "Authenticated users can create posts"
  ON posts FOR INSERT
  WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update own posts"
  ON posts FOR UPDATE
  USING (auth.uid() = author_id);

CREATE POLICY "Users can delete own posts"
  ON posts FOR DELETE
  USING (auth.uid() = author_id);

-- Replies policies
CREATE POLICY "Replies are viewable by everyone"
  ON replies FOR SELECT
  USING (true);

CREATE POLICY "Authenticated users can create replies"
  ON replies FOR INSERT
  WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update own replies"
  ON replies FOR UPDATE
  USING (auth.uid() = author_id);

CREATE POLICY "Users can delete own replies"
  ON replies FOR DELETE
  USING (auth.uid() = author_id);

-- Likes policies
CREATE POLICY "Likes are viewable by everyone"
  ON likes FOR SELECT
  USING (true);

CREATE POLICY "Authenticated users can create likes"
  ON likes FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own likes"
  ON likes FOR DELETE
  USING (auth.uid() = user_id);

-- Create function to handle updated_at
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updated_at
CREATE TRIGGER handle_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

CREATE TRIGGER handle_posts_updated_at
  BEFORE UPDATE ON posts
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

CREATE TRIGGER handle_replies_updated_at
  BEFORE UPDATE ON replies
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

================
File: supabase/migrations/20250211021811_royal_frost.sql
================
/*
  # Add User Profile Table

  1. New Tables
    - `user_profile`
      - `id` (uuid, primary key, references auth.users)
      - `username` (text, unique)
      - `email` (text, unique)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `user_profile` table
    - Add policies for authenticated users to:
      - Read their own profile
      - Update their own profile
      - Delete their own profile
*/

CREATE TABLE IF NOT EXISTS user_profile (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  username text UNIQUE NOT NULL,
  email text UNIQUE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE user_profile ENABLE ROW LEVEL SECURITY;

-- Policies for user_profile table
CREATE POLICY "Users can view own profile"
  ON user_profile
  FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON user_profile
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can delete own profile"
  ON user_profile
  FOR DELETE
  TO authenticated
  USING (auth.uid() = id);

-- Trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profile_updated_at
  BEFORE UPDATE
  ON user_profile
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

================
File: supabase/migrations/20250211023102_amber_meadow.sql
================
/*
  # Add Profile Creation Trigger

  1. New Function
    - `handle_new_user`: Creates a profile when a new user signs up

  2. Changes
    - Add trigger on auth.users to automatically create profile
    - Add policy to allow profile creation during signup

  3. Security
    - Function is security definer to allow profile creation
*/

-- Create function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.user_profile (id, username, email)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'username', split_part(NEW.email, '@', 1)),
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Add policy to allow profile creation during signup
CREATE POLICY "Profiles can be created during signup"
  ON public.user_profile
  FOR INSERT
  WITH CHECK (auth.uid() = id);

================
File: supabase/migrations/20250211023257_damp_pine.sql
================
/*
  # Add name field to user profile

  1. Changes
    - Add name column to user_profile table
    - Update handle_new_user function to store name
    - Add name to existing profiles with email prefix as default

  2. Security
    - Maintain existing RLS policies
*/

-- Add name column to user_profile
ALTER TABLE user_profile
ADD COLUMN IF NOT EXISTS name text;

-- Update existing profiles with default name
UPDATE user_profile
SET name = username
WHERE name IS NULL;

-- Make name required for future entries
ALTER TABLE user_profile
ALTER COLUMN name SET NOT NULL;

-- Update handle_new_user function to include name
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.user_profile (id, username, email, name)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'username', split_part(NEW.email, '@', 1)),
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1))
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

================
File: supabase/migrations/20250211023723_young_prism.sql
================
/*
  # Merge Profile Tables

  1. Changes
    - Safely merge profiles and user_profile tables into a single profiles table
    - Preserve all necessary data
    - Update references and constraints
  
  2. Security
    - Maintain RLS policies
    - Ensure data integrity
*/

-- First, ensure we have all the data in user_profile
DO $$ 
BEGIN
  -- Copy data from profiles to user_profile if it exists
  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'profiles') THEN
    INSERT INTO user_profile (id, username, email, name)
    SELECT 
      p.id,
      p.username,
      u.email,
      COALESCE(p.username, split_part(u.email, '@', 1))
    FROM profiles p
    JOIN auth.users u ON p.id = u.id
    WHERE NOT EXISTS (
      SELECT 1 FROM user_profile up WHERE up.id = p.id
    )
    ON CONFLICT (id) DO NOTHING;
  END IF;
END $$;

-- Drop the old profiles table if it exists
DROP TABLE IF EXISTS profiles CASCADE;

-- Rename user_profile to profiles
ALTER TABLE user_profile RENAME TO profiles;

-- Create posts table if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'posts') THEN
    CREATE TABLE posts (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      content text NOT NULL,
      author_id uuid NOT NULL,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now(),
      CONSTRAINT fk_author
        FOREIGN KEY (author_id)
        REFERENCES profiles(id)
        ON DELETE CASCADE
    );
  END IF;
END $$;

-- Create replies table if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'replies') THEN
    CREATE TABLE replies (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      content text NOT NULL,
      post_id uuid NOT NULL,
      author_id uuid NOT NULL,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now(),
      CONSTRAINT fk_post
        FOREIGN KEY (post_id)
        REFERENCES posts(id)
        ON DELETE CASCADE,
      CONSTRAINT fk_author
        FOREIGN KEY (author_id)
        REFERENCES profiles(id)
        ON DELETE CASCADE
    );
  END IF;
END $$;

-- Create likes table if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'likes') THEN
    CREATE TABLE likes (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id uuid NOT NULL,
      post_id uuid,
      reply_id uuid,
      created_at timestamptz DEFAULT now(),
      CONSTRAINT fk_user
        FOREIGN KEY (user_id)
        REFERENCES profiles(id)
        ON DELETE CASCADE,
      CONSTRAINT fk_post
        FOREIGN KEY (post_id)
        REFERENCES posts(id)
        ON DELETE CASCADE,
      CONSTRAINT fk_reply
        FOREIGN KEY (reply_id)
        REFERENCES replies(id)
        ON DELETE CASCADE,
      CONSTRAINT like_target_check CHECK (
        (post_id IS NOT NULL AND reply_id IS NULL) OR
        (post_id IS NULL AND reply_id IS NOT NULL)
      ),
      CONSTRAINT unique_post_like UNIQUE (user_id, post_id),
      CONSTRAINT unique_reply_like UNIQUE (user_id, reply_id)
    );
  END IF;
END $$;

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE replies ENABLE ROW LEVEL SECURITY;
ALTER TABLE likes ENABLE ROW LEVEL SECURITY;

-- Update the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username, email, name)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'username', split_part(NEW.email, '@', 1)),
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1))
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Safely create RLS policies
DO $$ 
BEGIN
  -- Profiles policies
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Public profiles are viewable by everyone' AND tablename = 'profiles') THEN
    CREATE POLICY "Public profiles are viewable by everyone"
      ON profiles FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can update own profile' AND tablename = 'profiles') THEN
    CREATE POLICY "Users can update own profile"
      ON profiles FOR UPDATE
      USING (auth.uid() = id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can delete own profile' AND tablename = 'profiles') THEN
    CREATE POLICY "Users can delete own profile"
      ON profiles FOR DELETE
      USING (auth.uid() = id);
  END IF;

  -- Posts policies
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Posts are viewable by everyone' AND tablename = 'posts') THEN
    CREATE POLICY "Posts are viewable by everyone"
      ON posts FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Authenticated users can create posts' AND tablename = 'posts') THEN
    CREATE POLICY "Authenticated users can create posts"
      ON posts FOR INSERT
      WITH CHECK (auth.uid() = author_id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can update own posts' AND tablename = 'posts') THEN
    CREATE POLICY "Users can update own posts"
      ON posts FOR UPDATE
      USING (auth.uid() = author_id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can delete own posts' AND tablename = 'posts') THEN
    CREATE POLICY "Users can delete own posts"
      ON posts FOR DELETE
      USING (auth.uid() = author_id);
  END IF;

  -- Replies policies
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Replies are viewable by everyone' AND tablename = 'replies') THEN
    CREATE POLICY "Replies are viewable by everyone"
      ON replies FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Authenticated users can create replies' AND tablename = 'replies') THEN
    CREATE POLICY "Authenticated users can create replies"
      ON replies FOR INSERT
      WITH CHECK (auth.uid() = author_id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can update own replies' AND tablename = 'replies') THEN
    CREATE POLICY "Users can update own replies"
      ON replies FOR UPDATE
      USING (auth.uid() = author_id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can delete own replies' AND tablename = 'replies') THEN
    CREATE POLICY "Users can delete own replies"
      ON replies FOR DELETE
      USING (auth.uid() = author_id);
  END IF;

  -- Likes policies
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Likes are viewable by everyone' AND tablename = 'likes') THEN
    CREATE POLICY "Likes are viewable by everyone"
      ON likes FOR SELECT
      USING (true);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Authenticated users can create likes' AND tablename = 'likes') THEN
    CREATE POLICY "Authenticated users can create likes"
      ON likes FOR INSERT
      WITH CHECK (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can delete own likes' AND tablename = 'likes') THEN
    CREATE POLICY "Users can delete own likes"
      ON likes FOR DELETE
      USING (auth.uid() = user_id);
  END IF;
END $$;

================
File: supabase/migrations/20250211025415_proud_wood.sql
================
/*
  # Secure Profile Operations

  1. Changes
    - Add RLS policies for profile operations
    - Ensure only authenticated users can perform CRUD operations on their own profiles
    - Maintain public read access for profiles
  
  2. Security
    - Enforce authentication for all write operations
    - Restrict profile modifications to profile owners
*/

-- Drop existing policies if they exist
DO $$ 
BEGIN
  -- We keep the public select policy as it's needed for displaying user information
  IF EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can update own profile' AND tablename = 'profiles') THEN
    DROP POLICY "Users can update own profile" ON profiles;
  END IF;

  IF EXISTS (SELECT FROM pg_policies WHERE policyname = 'Users can delete own profile' AND tablename = 'profiles') THEN
    DROP POLICY "Users can delete own profile" ON profiles;
  END IF;
END $$;

-- Create comprehensive RLS policies for profiles
DO $$ 
BEGIN
  -- Allow authenticated users to update their own profile
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Authenticated users can update own profile' AND tablename = 'profiles') THEN
    CREATE POLICY "Authenticated users can update own profile"
      ON profiles
      FOR UPDATE
      TO authenticated
      USING (auth.uid() = id)
      WITH CHECK (auth.uid() = id);
  END IF;

  -- Allow authenticated users to delete their own profile
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Authenticated users can delete own profile' AND tablename = 'profiles') THEN
    CREATE POLICY "Authenticated users can delete own profile"
      ON profiles
      FOR DELETE
      TO authenticated
      USING (auth.uid() = id);
  END IF;

  -- Allow profile creation only during signup (handled by trigger)
  IF NOT EXISTS (SELECT FROM pg_policies WHERE policyname = 'Profile creation restricted to auth trigger' AND tablename = 'profiles') THEN
    CREATE POLICY "Profile creation restricted to auth trigger"
      ON profiles
      FOR INSERT
      WITH CHECK (auth.uid() = id);
  END IF;
END $$;

================
File: supabase/migrations/20250211031036_royal_sound.sql
================
/*
  # Fix Profile Table and Policies

  1. Changes
    - Add nickname-based profile structure
    - Update trigger for new user registration
    - Add safe policy creation with existence checks

  2. Security
    - Enable RLS
    - Add policies for profile management
*/

-- Create profiles table if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'profiles') THEN
    CREATE TABLE profiles (
      id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
      nickname text NOT NULL,
      email text NOT NULL,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );

    -- Enable RLS
    ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
  END IF;
END $$;

-- Create function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, nickname, email)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'nickname', split_part(NEW.email, '@', 1)),
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Safely create trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Safely create policies
DO $$ 
BEGIN
  -- Drop existing policies if they exist
  DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
  DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
  DROP POLICY IF EXISTS "Profiles can be created during signup" ON profiles;

  -- Recreate policies
  CREATE POLICY "Public profiles are viewable by everyone"
    ON profiles FOR SELECT
    USING (true);

  CREATE POLICY "Users can update own profile"
    ON profiles FOR UPDATE
    USING (auth.uid() = id);

  CREATE POLICY "Profiles can be created during signup"
    ON profiles FOR INSERT
    WITH CHECK (auth.uid() = id);
END $$;

================
File: supabase/migrations/20250211031402_weathered_shrine.sql
================
/*
  # Update Profile Schema for Nickname

  1. Changes
    - Drop existing profiles table
    - Recreate profiles table with nickname field
    - Update trigger function for new user signup
    - Add comprehensive RLS policies

  2. Security
    - Enable RLS
    - Add policies for profile management
*/

-- Drop existing table and related objects
DROP TABLE IF EXISTS profiles CASCADE;
DROP FUNCTION IF EXISTS handle_new_user CASCADE;

-- Create profiles table
CREATE TABLE profiles (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  nickname text NOT NULL,
  email text NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Create function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, nickname, email)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'nickname', split_part(NEW.email, '@', 1)),
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Create RLS policies
CREATE POLICY "Public profiles are viewable by everyone"
  ON profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

CREATE POLICY "Profiles can be created during signup"
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

================
File: supabase/migrations/20250211031657_pink_sky.sql
================
/*
  # Add Profile Relationships

  1. Changes
    - Add foreign key constraints from posts to profiles
    - Add foreign key constraints from replies to profiles
    - Add foreign key constraints from likes to profiles
    - Update existing tables to reference profiles.id

  2. Security
    - Maintain existing RLS policies
    - Ensure referential integrity
*/

-- Add foreign key constraints to posts table
ALTER TABLE posts
DROP CONSTRAINT IF EXISTS fk_author,
ADD CONSTRAINT fk_author
  FOREIGN KEY (author_id)
  REFERENCES profiles(id)
  ON DELETE CASCADE;

-- Add foreign key constraints to replies table
ALTER TABLE replies
DROP CONSTRAINT IF EXISTS fk_author,
ADD CONSTRAINT fk_author
  FOREIGN KEY (author_id)
  REFERENCES profiles(id)
  ON DELETE CASCADE;

-- Add foreign key constraints to likes table
ALTER TABLE likes
DROP CONSTRAINT IF EXISTS fk_user,
ADD CONSTRAINT fk_user
  FOREIGN KEY (user_id)
  REFERENCES profiles(id)
  ON DELETE CASCADE;

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_posts_author ON posts(author_id);
CREATE INDEX IF NOT EXISTS idx_replies_author ON replies(author_id);
CREATE INDEX IF NOT EXISTS idx_likes_user ON likes(user_id);

================
File: supabase/migrations/20250211031821_silver_cloud.sql
================
/*
  # Clear All Data

  1. Changes
    - Delete all data from likes table
    - Delete all data from replies table
    - Delete all data from posts table
    - Delete all data from profiles table
    - Preserve table structures and relationships

  Note: Order of deletion is important due to foreign key constraints
*/

-- Delete data in order of dependencies
DELETE FROM likes;
DELETE FROM replies;
DELETE FROM posts;
DELETE FROM profiles;

================
File: supabase/migrations/20250211040434_stark_plain.sql
================
/*
  # Database Schema Update
  
  This migration safely handles table creation and updates by:
  1. Checking for existing tables
  2. Using IF NOT EXISTS clauses
  3. Safely dropping and recreating policies
*/

-- Safely create or update tables
DO $$ 
BEGIN
  -- Create tables if they don't exist
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'profiles') THEN
    CREATE TABLE profiles (
      id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
      nickname text NOT NULL,
      email text NOT NULL,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );

    ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
  END IF;

  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'posts') THEN
    CREATE TABLE posts (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      content text NOT NULL,
      author_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );

    ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
  END IF;

  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'replies') THEN
    CREATE TABLE replies (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      content text NOT NULL,
      post_id uuid NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
      author_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );

    ALTER TABLE replies ENABLE ROW LEVEL SECURITY;
  END IF;

  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'likes') THEN
    CREATE TABLE likes (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
      post_id uuid REFERENCES posts(id) ON DELETE CASCADE,
      reply_id uuid REFERENCES replies(id) ON DELETE CASCADE,
      created_at timestamptz DEFAULT now(),
      CONSTRAINT like_target_check CHECK (
        (post_id IS NOT NULL AND reply_id IS NULL) OR
        (post_id IS NULL AND reply_id IS NOT NULL)
      ),
      CONSTRAINT unique_post_like UNIQUE (user_id, post_id),
      CONSTRAINT unique_reply_like UNIQUE (user_id, reply_id)
    );

    ALTER TABLE likes ENABLE ROW LEVEL SECURITY;
  END IF;
END $$;

-- Safely create or replace the user signup handler
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, nickname, email)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'nickname', split_part(NEW.email, '@', 1)),
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Safely create trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Safely recreate all policies
DO $$ 
BEGIN
  -- Profiles policies
  DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
  DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
  DROP POLICY IF EXISTS "Profiles can be created during signup" ON profiles;

  CREATE POLICY "Public profiles are viewable by everyone"
    ON profiles FOR SELECT
    USING (true);

  CREATE POLICY "Users can update own profile"
    ON profiles FOR UPDATE
    USING (auth.uid() = id);

  CREATE POLICY "Profiles can be created during signup"
    ON profiles FOR INSERT
    WITH CHECK (auth.uid() = id);

  -- Posts policies
  DROP POLICY IF EXISTS "Posts are viewable by everyone" ON posts;
  DROP POLICY IF EXISTS "Authenticated users can create posts" ON posts;
  DROP POLICY IF EXISTS "Users can update own posts" ON posts;
  DROP POLICY IF EXISTS "Users can delete own posts" ON posts;

  CREATE POLICY "Posts are viewable by everyone"
    ON posts FOR SELECT
    USING (true);

  CREATE POLICY "Authenticated users can create posts"
    ON posts FOR INSERT
    WITH CHECK (auth.uid() = author_id);

  CREATE POLICY "Users can update own posts"
    ON posts FOR UPDATE
    USING (auth.uid() = author_id);

  CREATE POLICY "Users can delete own posts"
    ON posts FOR DELETE
    USING (auth.uid() = author_id);

  -- Replies policies
  DROP POLICY IF EXISTS "Replies are viewable by everyone" ON replies;
  DROP POLICY IF EXISTS "Authenticated users can create replies" ON replies;
  DROP POLICY IF EXISTS "Users can update own replies" ON replies;
  DROP POLICY IF EXISTS "Users can delete own replies" ON replies;

  CREATE POLICY "Replies are viewable by everyone"
    ON replies FOR SELECT
    USING (true);

  CREATE POLICY "Authenticated users can create replies"
    ON replies FOR INSERT
    WITH CHECK (auth.uid() = author_id);

  CREATE POLICY "Users can update own replies"
    ON replies FOR UPDATE
    USING (auth.uid() = author_id);

  CREATE POLICY "Users can delete own replies"
    ON replies FOR DELETE
    USING (auth.uid() = author_id);

  -- Likes policies
  DROP POLICY IF EXISTS "Likes are viewable by everyone" ON likes;
  DROP POLICY IF EXISTS "Authenticated users can create likes" ON likes;
  DROP POLICY IF EXISTS "Users can delete own likes" ON likes;

  CREATE POLICY "Likes are viewable by everyone"
    ON likes FOR SELECT
    USING (true);

  CREATE POLICY "Authenticated users can create likes"
    ON likes FOR INSERT
    WITH CHECK (auth.uid() = user_id);

  CREATE POLICY "Users can delete own likes"
    ON likes FOR DELETE
    USING (auth.uid() = user_id);
END $$;

-- Create indexes if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_posts_author') THEN
    CREATE INDEX idx_posts_author ON posts(author_id);
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_replies_author') THEN
    CREATE INDEX idx_replies_author ON replies(author_id);
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_likes_user') THEN
    CREATE INDEX idx_likes_user ON likes(user_id);
  END IF;
END $$;

================
File: supabase/migrations/20250211044753_bronze_bridge.sql
================
/*
  # Add Pain Points Tables

  1. New Tables
    - `pain_points`: Stores available pain points
      - `id` (uuid, primary key)
      - `name` (text, not null)
      - `created_at` (timestamp)
    - `user_pain_points`: Junction table for user selections
      - `id` (uuid, primary key)
      - `user_id` (uuid, references profiles)
      - `pain_point_id` (uuid, references pain_points)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users
    - Add policies for public access to pain_points table

  3. Initial Data
    - Insert predefined pain points from the application
*/

-- Create pain_points table
CREATE TABLE pain_points (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  created_at timestamptz DEFAULT now()
);

-- Create user_pain_points junction table
CREATE TABLE user_pain_points (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  pain_point_id uuid REFERENCES pain_points(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  UNIQUE(user_id, pain_point_id)
);

-- Enable RLS
ALTER TABLE pain_points ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_pain_points ENABLE ROW LEVEL SECURITY;

-- Pain points policies
CREATE POLICY "Pain points are viewable by everyone"
  ON pain_points FOR SELECT
  USING (true);

-- User pain points policies
CREATE POLICY "Users can view their own pain point selections"
  ON user_pain_points FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own pain point selections"
  ON user_pain_points FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own pain point selections"
  ON user_pain_points FOR DELETE
  USING (auth.uid() = user_id);

-- Insert initial pain points
INSERT INTO pain_points (name) VALUES
  ('Zero Fee International Transfers'),
  ('Automated Savings Rules'),
  ('Real-time Investment Tracking'),
  ('Budgeting & Expense Analysis'),
  ('Crypto Integration'),
  ('Bill Splitting & Social Payments'),
  ('Customizable Spending Limits'),
  ('Multi-currency Accounts'),
  ('Cashback Rewards Program'),
  ('High Transaction Fees'),
  ('Complex Account Opening Process'),
  ('Poor Customer Service'),
  ('Limited Mobile Banking Features'),
  ('Long Processing Times'),
  ('Hidden Charges'),
  ('Inflexible Account Options'),
  ('Outdated Technology'),
  ('Limited International Support')
ON CONFLICT (name) DO NOTHING;

================
File: supabase/migrations/20250211045552_autumn_firefly.sql
================
/*
  # Update pain points schema

  1. Changes
    - Convert pain_points table to use numeric IDs
    - Update user_pain_points table to reference numeric IDs
    - Re-insert pain points with correct numeric IDs to match frontend

  2. Security
    - Maintains existing RLS policies
*/

-- First, drop existing tables and recreate with numeric IDs
DROP TABLE IF EXISTS user_pain_points;
DROP TABLE IF EXISTS pain_points;

-- Recreate pain_points table with numeric ID
CREATE TABLE pain_points (
  id integer PRIMARY KEY,
  name text NOT NULL UNIQUE,
  created_at timestamptz DEFAULT now()
);

-- Recreate user_pain_points junction table
CREATE TABLE user_pain_points (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  pain_point_id integer REFERENCES pain_points(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  UNIQUE(user_id, pain_point_id)
);

-- Enable RLS
ALTER TABLE pain_points ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_pain_points ENABLE ROW LEVEL SECURITY;

-- Pain points policies
CREATE POLICY "Pain points are viewable by everyone"
  ON pain_points FOR SELECT
  USING (true);

-- User pain points policies
CREATE POLICY "Users can view their own pain point selections"
  ON user_pain_points FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own pain point selections"
  ON user_pain_points FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own pain point selections"
  ON user_pain_points FOR DELETE
  USING (auth.uid() = user_id);

-- Insert pain points with numeric IDs matching frontend
INSERT INTO pain_points (id, name) VALUES
  (1, 'Zero Fee International Transfers'),
  (2, 'Automated Savings Rules'),
  (3, 'Real-time Investment Tracking'),
  (4, 'Budgeting & Expense Analysis'),
  (5, 'Crypto Integration'),
  (6, 'Bill Splitting & Social Payments'),
  (7, 'Customizable Spending Limits'),
  (8, 'Multi-currency Accounts'),
  (9, 'Cashback Rewards Program'),
  (10, 'High Transaction Fees'),
  (11, 'Complex Account Opening Process'),
  (12, 'Poor Customer Service'),
  (13, 'Limited Mobile Banking Features'),
  (14, 'Long Processing Times'),
  (15, 'Hidden Charges'),
  (16, 'Inflexible Account Options'),
  (17, 'Outdated Technology'),
  (18, 'Limited International Support')
ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name;

================
File: supabase/migrations/20250211045734_ancient_heart.sql
================
/*
  # Simplify pain points storage
  
  1. Changes
    - Drop existing pain points tables since we'll store selections in user metadata
    - Clean up any existing data
*/

-- Drop existing tables
DROP TABLE IF EXISTS user_pain_points;
DROP TABLE IF EXISTS pain_points;

================
File: supabase/migrations/20250211050441_fragrant_bird.sql
================
/*
  # Simplify pain points storage
  
  1. Changes
    - Drop existing pain points tables since we'll store selections in user metadata
    - Clean up any existing data
*/

-- Drop existing tables
DROP TABLE IF EXISTS user_pain_points;
DROP TABLE IF EXISTS pain_points;

================
File: supabase/migrations/20250211063840_autumn_garden.sql
================
/*
  # Add Community Posts Tables

  1. New Tables
    - `community_posts`
      - `id` (uuid, primary key)
      - `content` (text)
      - `author_id` (uuid, references profiles)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    - `post_likes`
      - `id` (uuid, primary key)
      - `post_id` (uuid, references community_posts)
      - `user_id` (uuid, references profiles)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users
*/

-- Create community_posts table
CREATE TABLE community_posts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  content text NOT NULL,
  author_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create post_likes table
CREATE TABLE post_likes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  post_id uuid REFERENCES community_posts(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  UNIQUE(post_id, user_id)
);

-- Enable RLS
ALTER TABLE community_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE post_likes ENABLE ROW LEVEL SECURITY;

-- Policies for community_posts
CREATE POLICY "Posts are viewable by everyone"
  ON community_posts FOR SELECT
  USING (true);

CREATE POLICY "Users can create posts"
  ON community_posts FOR INSERT
  WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update own posts"
  ON community_posts FOR UPDATE
  USING (auth.uid() = author_id);

CREATE POLICY "Users can delete own posts"
  ON community_posts FOR DELETE
  USING (auth.uid() = author_id);

-- Policies for post_likes
CREATE POLICY "Likes are viewable by everyone"
  ON post_likes FOR SELECT
  USING (true);

CREATE POLICY "Users can like posts"
  ON post_likes FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can unlike posts"
  ON post_likes FOR DELETE
  USING (auth.uid() = user_id);

-- Create updated_at trigger for community_posts
CREATE OR REPLACE FUNCTION update_community_posts_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_community_posts_updated_at
  BEFORE UPDATE ON community_posts
  FOR EACH ROW
  EXECUTE FUNCTION update_community_posts_updated_at();

================
File: supabase/migrations/20250211064154_cool_limit.sql
================
/*
  # Add Post Replies Support

  1. New Tables
    - `post_replies`
      - `id` (uuid, primary key)
      - `content` (text)
      - `post_id` (uuid, references community_posts)
      - `author_id` (uuid, references profiles)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    - `reply_likes`
      - `id` (uuid, primary key)
      - `reply_id` (uuid, references post_replies)
      - `user_id` (uuid, references profiles)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users
*/

-- Create post_replies table
CREATE TABLE post_replies (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  content text NOT NULL,
  post_id uuid REFERENCES community_posts(id) ON DELETE CASCADE NOT NULL,
  author_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create reply_likes table
CREATE TABLE reply_likes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  reply_id uuid REFERENCES post_replies(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  UNIQUE(reply_id, user_id)
);

-- Enable RLS
ALTER TABLE post_replies ENABLE ROW LEVEL SECURITY;
ALTER TABLE reply_likes ENABLE ROW LEVEL SECURITY;

-- Policies for post_replies
CREATE POLICY "Replies are viewable by everyone"
  ON post_replies FOR SELECT
  USING (true);

CREATE POLICY "Users can create replies"
  ON post_replies FOR INSERT
  WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update own replies"
  ON post_replies FOR UPDATE
  USING (auth.uid() = author_id);

CREATE POLICY "Users can delete own replies"
  ON post_replies FOR DELETE
  USING (auth.uid() = author_id);

-- Policies for reply_likes
CREATE POLICY "Reply likes are viewable by everyone"
  ON reply_likes FOR SELECT
  USING (true);

CREATE POLICY "Users can like replies"
  ON reply_likes FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can unlike replies"
  ON reply_likes FOR DELETE
  USING (auth.uid() = user_id);

-- Create updated_at trigger for post_replies
CREATE OR REPLACE FUNCTION update_post_replies_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_post_replies_updated_at
  BEFORE UPDATE ON post_replies
  FOR EACH ROW
  EXECUTE FUNCTION update_post_replies_updated_at();

================
File: supabase/migrations/20250220035045_cold_lake.sql
================
/*
  # Consolidate Posts and Likes Tables

  1. Changes
    - Drop redundant tables (posts, likes)
    - Rename community_posts to posts for better naming
    - Consolidate likes tables into a single table
    
  2. Security
    - Maintain existing RLS policies
    - Transfer existing policies to new consolidated tables
*/

-- First, ensure we have no orphaned likes
DELETE FROM post_likes WHERE post_id NOT IN (SELECT id FROM community_posts);
DELETE FROM reply_likes WHERE reply_id NOT IN (SELECT id FROM post_replies);

-- Drop old unused tables
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS posts CASCADE;

-- Create temporary table for storing likes data
CREATE TEMP TABLE temp_likes AS
SELECT id, post_id, user_id, created_at, NULL::uuid as reply_id
FROM post_likes
UNION ALL
SELECT id, NULL::uuid as post_id, user_id, created_at, reply_id
FROM reply_likes;

-- Drop old likes tables
DROP TABLE IF EXISTS post_likes CASCADE;
DROP TABLE IF EXISTS reply_likes CASCADE;

-- Rename community_posts to posts
ALTER TABLE community_posts RENAME TO posts;

-- Create new consolidated likes table
CREATE TABLE likes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  post_id uuid REFERENCES posts(id) ON DELETE CASCADE,
  reply_id uuid REFERENCES post_replies(id) ON DELETE CASCADE,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  CONSTRAINT like_target_check CHECK (
    (post_id IS NOT NULL AND reply_id IS NULL) OR 
    (post_id IS NULL AND reply_id IS NOT NULL)
  ),
  CONSTRAINT unique_post_like UNIQUE (user_id, post_id),
  CONSTRAINT unique_reply_like UNIQUE (user_id, reply_id)
);

-- Insert data from temporary table
INSERT INTO likes (id, post_id, reply_id, user_id, created_at)
SELECT id, post_id, reply_id, user_id, created_at
FROM temp_likes;

-- Drop temporary table
DROP TABLE temp_likes;

-- Create indexes for better performance
CREATE INDEX idx_likes_post ON likes(post_id);
CREATE INDEX idx_likes_reply ON likes(reply_id);
CREATE INDEX idx_likes_user ON likes(user_id);

-- Ensure RLS is enabled
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE likes ENABLE ROW LEVEL SECURITY;

-- Recreate policies for posts table
DO $$ 
BEGIN
  -- Posts policies
  DROP POLICY IF EXISTS "Posts are viewable by everyone" ON posts;
  DROP POLICY IF EXISTS "Users can create posts" ON posts;
  DROP POLICY IF EXISTS "Users can update own posts" ON posts;
  DROP POLICY IF EXISTS "Users can delete own posts" ON posts;

  CREATE POLICY "Posts are viewable by everyone"
    ON posts FOR SELECT
    USING (true);

  CREATE POLICY "Users can create posts"
    ON posts FOR INSERT
    WITH CHECK (auth.uid() = author_id);

  CREATE POLICY "Users can update own posts"
    ON posts FOR UPDATE
    USING (auth.uid() = author_id);

  CREATE POLICY "Users can delete own posts"
    ON posts FOR DELETE
    USING (auth.uid() = author_id);

  -- Likes policies
  CREATE POLICY "Likes are viewable by everyone"
    ON likes FOR SELECT
    USING (true);

  CREATE POLICY "Users can create likes"
    ON likes FOR INSERT
    WITH CHECK (auth.uid() = user_id);

  CREATE POLICY "Users can delete own likes"
    ON likes FOR DELETE
    USING (auth.uid() = user_id);
END $$;

================
File: supabase/migrations/20250220035515_blue_garden.sql
================
/*
  # Merge replies tables
  
  1. Changes
    - Merge 'replies' and 'post_replies' tables into a single 'replies' table
    - Update foreign key references
    - Recreate indexes and policies
    
  2. Security
    - Enable RLS on replies table
    - Add policies for CRUD operations
*/

-- First, ensure we have no orphaned data
DELETE FROM post_replies WHERE post_id NOT IN (SELECT id FROM posts);

-- Drop old unused tables
DROP TABLE IF EXISTS replies CASCADE;

-- Rename post_replies to replies
ALTER TABLE post_replies RENAME TO replies;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_replies_post ON replies(post_id);
CREATE INDEX IF NOT EXISTS idx_replies_author ON replies(author_id);

-- Ensure RLS is enabled
ALTER TABLE replies ENABLE ROW LEVEL SECURITY;

-- Recreate policies for replies table
DO $$ 
BEGIN
  DROP POLICY IF EXISTS "Replies are viewable by everyone" ON replies;
  DROP POLICY IF EXISTS "Users can create replies" ON replies;
  DROP POLICY IF EXISTS "Users can update own replies" ON replies;
  DROP POLICY IF EXISTS "Users can delete own replies" ON replies;

  CREATE POLICY "Replies are viewable by everyone"
    ON replies FOR SELECT
    USING (true);

  CREATE POLICY "Users can create replies"
    ON replies FOR INSERT
    WITH CHECK (auth.uid() = author_id);

  CREATE POLICY "Users can update own replies"
    ON replies FOR UPDATE
    USING (auth.uid() = author_id);

  CREATE POLICY "Users can delete own replies"
    ON replies FOR DELETE
    USING (auth.uid() = author_id);
END $$;

================
File: supabase/migrations/20250220072154_copper_spring.sql
================
/*
  # Add user selections table

  1. New Tables
    - `user_selections`
      - `id` (uuid, primary key)
      - `user_id` (uuid, references profiles)
      - `selections` (integer array)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `user_selections` table
    - Add policies for authenticated users to manage their selections
*/

-- Create user_selections table
CREATE TABLE user_selections (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  selections integer[] NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id)
);

-- Enable RLS
ALTER TABLE user_selections ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own selections"
  ON user_selections FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own selections"
  ON user_selections FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own selections"
  ON user_selections FOR UPDATE
  USING (auth.uid() = user_id);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_user_selections_updated_at
  BEFORE UPDATE ON user_selections
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

================
File: supabase/migrations/20250220072504_billowing_palace.sql
================
/*
  # Add user selections table

  1. New Tables
    - `user_selections`
      - `id` (uuid, primary key)
      - `user_id` (uuid, references profiles)
      - `selections` (integer array)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `user_selections` table
    - Add policies for authenticated users to manage their selections
*/

-- Create user_selections table
CREATE TABLE user_selections (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  selections integer[] NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id)
);

-- Enable RLS
ALTER TABLE user_selections ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own selections"
  ON user_selections FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own selections"
  ON user_selections FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own selections"
  ON user_selections FOR UPDATE
  USING (auth.uid() = user_id);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_user_selections_updated_at
  BEFORE UPDATE ON user_selections
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

================
File: supabase/migrations/20250220082156_withered_smoke.sql
================
/*
  # Fix Authentication Setup

  1. Changes
    - Update profiles table structure
    - Update handle_new_user function
    - Refresh RLS policies
    - Add performance indexes

  2. Security
    - Maintain RLS on profiles table
    - Update policies for profile access and management
*/

-- First, update the profiles table structure without dropping
ALTER TABLE profiles
  ALTER COLUMN nickname SET NOT NULL,
  ALTER COLUMN email SET NOT NULL;

-- Drop existing trigger and function
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user();

-- Create updated function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, nickname, email)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'nickname', split_part(NEW.email, '@', 1)),
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create new trigger for user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Profiles can be created during signup" ON profiles;

-- Create fresh RLS policies
CREATE POLICY "Public profiles are viewable by everyone"
  ON profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

CREATE POLICY "Profiles can be created during signup"
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

-- Create or update indexes for better performance
DROP INDEX IF EXISTS idx_profiles_nickname;
DROP INDEX IF EXISTS idx_profiles_email;
CREATE INDEX IF NOT EXISTS idx_profiles_nickname ON profiles(nickname);
CREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);

================
File: supabase/migrations/20250221040154_solitary_hall.sql
================
/*
  # Add user selections table

  1. Changes:
    - Create user_selections table for storing user feature preferences
    - Add RLS policies for secure access
    - Add trigger for updated_at timestamp

  2. Security:
    - Enable RLS
    - Add policies for authenticated users to manage their selections
*/

-- Drop existing table if it exists
DROP TABLE IF EXISTS user_selections;

-- Create user_selections table
CREATE TABLE user_selections (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  selections integer[] NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id)
);

-- Enable RLS
ALTER TABLE user_selections ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own selections"
  ON user_selections FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own selections"
  ON user_selections FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own selections"
  ON user_selections FOR UPDATE
  USING (auth.uid() = user_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger
CREATE TRIGGER handle_user_selections_updated_at
  BEFORE UPDATE ON user_selections
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

================
File: supabase/migrations/20250221040842_autumn_ember.sql
================
/*
  # Create user selections table
  
  1. Table Structure
    - `user_selections` table for storing user feature preferences
    - Columns:
      - id (uuid, primary key)
      - user_id (uuid, foreign key to profiles)
      - selections (integer array)
      - created_at (timestamp)
      - updated_at (timestamp)
  
  2. Security
    - Enable RLS
    - Add policies for user access control
  
  3. Automation
    - Add trigger for updated_at timestamp
*/

-- Drop existing table if it exists
DROP TABLE IF EXISTS user_selections;

-- Create user_selections table
CREATE TABLE user_selections (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  selections integer[] NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id)
);

-- Enable RLS
ALTER TABLE user_selections ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own selections"
  ON user_selections FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own selections"
  ON user_selections FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own selections"
  ON user_selections FOR UPDATE
  USING (auth.uid() = user_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger
CREATE TRIGGER handle_user_selections_updated_at
  BEFORE UPDATE ON user_selections
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

================
File: supabase/migrations/20250222062007_broken_spark.sql
================
/*
  # Handle empty selections

  1. Changes
    - Modify user_selections table to ensure empty arrays are handled correctly
    - Add constraint to ensure selections is never null
    - Set default value to empty array

  2. Security
    - Maintain existing RLS policies
*/

-- Ensure selections column has proper constraints
ALTER TABLE user_selections 
ALTER COLUMN selections SET DEFAULT '{}',
ALTER COLUMN selections SET NOT NULL;

-- Add check constraint to ensure selections is at least an empty array
ALTER TABLE user_selections
ADD CONSTRAINT selections_not_null CHECK (selections IS NOT NULL);

-- Update any existing null values to empty arrays
UPDATE user_selections 
SET selections = '{}'
WHERE selections IS NULL;

================
File: supabase/migrations/20250307051602_long_sky.sql
================
/*
  # Add nested replies support

  1. Changes
    - Add parent_reply_id to replies table to support nested replies
    - Add foreign key constraint to ensure parent_reply_id references valid replies
    - Add check constraint to ensure a reply can't be its own parent
    - Add index on parent_reply_id for better query performance

  2. Security
    - Maintain existing RLS policies
*/

-- Add parent_reply_id column to replies table
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'replies' AND column_name = 'parent_reply_id'
  ) THEN
    ALTER TABLE replies 
    ADD COLUMN parent_reply_id uuid REFERENCES replies(id) ON DELETE CASCADE;

    -- Add index for better query performance
    CREATE INDEX idx_replies_parent ON replies(parent_reply_id);

    -- Add check constraint to prevent self-referencing
    ALTER TABLE replies 
    ADD CONSTRAINT replies_no_self_parent 
    CHECK (id != parent_reply_id);
  END IF;
END $$;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
        }
      },
      fontFamily: {
        sans: ['Work Sans', 'system-ui', 'sans-serif'],
        display: ['Monomakh Unicode', 'system-ui', 'serif'],
      },
      keyframes: {
        marquee: {
          '0%': { transform: 'translateX(0)' },
          '100%': { transform: 'translateX(-50%)' }
        },
        float: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-20px)' }
        },
        spark: {
          '0%': { transform: 'scale(1) rotate(0deg)', opacity: '1' },
          '50%': { transform: 'scale(1.2) rotate(180deg)', opacity: '0.8' },
          '100%': { transform: 'scale(1) rotate(360deg)', opacity: '1' }
        },
        ignite: {
          '0%': { transform: 'scale(0.8)', opacity: '0.3' },
          '50%': { transform: 'scale(1.1)', opacity: '1' },
          '100%': { transform: 'scale(0.8)', opacity: '0.3' }
        },
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        fadeOut: {
          '0%': { opacity: '1' },
          '100%': { opacity: '0' }
        },
      },
      animation: {
        marquee: 'marquee 15s linear infinite',
        float: 'float 6s ease-in-out infinite',
        spark: 'spark 4s ease-in-out infinite',
        ignite: 'ignite 3s ease-in-out infinite',
        fadeIn: 'fadeIn 0.5s ease-in',
        fadeOut: 'fadeOut 0.5s ease-out',
      },
    },
  },
  plugins: [],
};

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
        }
      },
      fontFamily: {
        sans: ['Work Sans', 'system-ui', 'sans-serif'],
        display: ['Monomakh Unicode', 'system-ui', 'serif'],
      },
      keyframes: {
        marquee: {
          '0%': { transform: 'translateX(0)' },
          '100%': { transform: 'translateX(-50%)' }
        },
        float: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-20px)' }
        },
        spark: {
          '0%': { transform: 'scale(1) rotate(0deg)', opacity: '1' },
          '50%': { transform: 'scale(1.2) rotate(180deg)', opacity: '0.8' },
          '100%': { transform: 'scale(1) rotate(360deg)', opacity: '1' }
        },
        ignite: {
          '0%': { transform: 'scale(0.8)', opacity: '0.3' },
          '50%': { transform: 'scale(1.1)', opacity: '1' },
          '100%': { transform: 'scale(0.8)', opacity: '0.3' }
        },
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        fadeOut: {
          '0%': { opacity: '1' },
          '100%': { opacity: '0' }
        },
      },
      animation: {
        marquee: 'marquee 15s linear infinite',
        float: 'float 6s ease-in-out infinite',
        spark: 'spark 4s ease-in-out infinite',
        ignite: 'ignite 3s ease-in-out infinite',
        fadeIn: 'fadeIn 0.5s ease-in',
        fadeOut: 'fadeOut 0.5s ease-out',
      },
    },
  },
  plugins: [],
}

export default config

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});



================================================================
End of Codebase
================================================================
